"""autogenerated by genpy from rosmln/MLNInference.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rosmln.msg

class MLNInference(genpy.Message):
  _md5sum = "a323c7ba8c5b0b3dd633858385013cce"
  _type = "rosmln/MLNInference"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string[] evidence
MRFClique[] cliques
================================================================================
MSG: rosmln/MRFClique
string[] variables
"""
  __slots__ = ['evidence','cliques']
  _slot_types = ['string[]','rosmln/MRFClique[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       evidence,cliques

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MLNInference, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.evidence is None:
        self.evidence = []
      if self.cliques is None:
        self.cliques = []
    else:
      self.evidence = []
      self.cliques = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.evidence)
      buff.write(_struct_I.pack(length))
      for val1 in self.evidence:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.cliques)
      buff.write(_struct_I.pack(length))
      for val1 in self.cliques:
        length = len(val1.variables)
        buff.write(_struct_I.pack(length))
        for val2 in val1.variables:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.cliques is None:
        self.cliques = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.evidence = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.evidence.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cliques = []
      for i in range(0, length):
        val1 = rosmln.msg.MRFClique()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.variables = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.variables.append(val2)
        self.cliques.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.evidence)
      buff.write(_struct_I.pack(length))
      for val1 in self.evidence:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.cliques)
      buff.write(_struct_I.pack(length))
      for val1 in self.cliques:
        length = len(val1.variables)
        buff.write(_struct_I.pack(length))
        for val2 in val1.variables:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.cliques is None:
        self.cliques = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.evidence = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.evidence.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cliques = []
      for i in range(0, length):
        val1 = rosmln.msg.MRFClique()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.variables = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.variables.append(val2)
        self.cliques.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
