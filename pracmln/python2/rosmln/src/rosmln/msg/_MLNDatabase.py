"""autogenerated by genpy from rosmln/MLNDatabase.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rosmln.msg

class MLNDatabase(genpy.Message):
  _md5sum = "39d35ee1af4d2b76c41c0a4b3e192348"
  _type = "rosmln/MLNDatabase"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """AtomProbPair[] evidence

================================================================================
MSG: rosmln/AtomProbPair
string atom
float32 prob

"""
  __slots__ = ['evidence']
  _slot_types = ['rosmln/AtomProbPair[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       evidence

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MLNDatabase, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.evidence is None:
        self.evidence = []
    else:
      self.evidence = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.evidence)
      buff.write(_struct_I.pack(length))
      for val1 in self.evidence:
        _x = val1.atom
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_f.pack(val1.prob))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.evidence is None:
        self.evidence = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.evidence = []
      for i in range(0, length):
        val1 = rosmln.msg.AtomProbPair()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.atom = str[start:end].decode('utf-8')
        else:
          val1.atom = str[start:end]
        start = end
        end += 4
        (val1.prob,) = _struct_f.unpack(str[start:end])
        self.evidence.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.evidence)
      buff.write(_struct_I.pack(length))
      for val1 in self.evidence:
        _x = val1.atom
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_f.pack(val1.prob))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.evidence is None:
        self.evidence = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.evidence = []
      for i in range(0, length):
        val1 = rosmln.msg.AtomProbPair()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.atom = str[start:end].decode('utf-8')
        else:
          val1.atom = str[start:end]
        start = end
        end += 4
        (val1.prob,) = _struct_f.unpack(str[start:end])
        self.evidence.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_f = struct.Struct("<f")
